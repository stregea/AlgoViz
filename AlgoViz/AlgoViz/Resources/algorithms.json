[
    {
        "id": 1,
        "name": "Selection Sort",
        "timeComplexity": "n2",
        "spaceComplexity": "constant",
        "bestCase": "n2",
        "worstCase": "n2",
        "type": "sorting",
        "isSortingAlgorithm": true,
        "isPathfindingAlgorithm": false,
        "description": "Note: Taken from wikipedia change wording later. The algorithm divides the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right."
    },
    {
        "id": 2,
        "name": "Insertion Sort",
        "timeComplexity": "n2",
        "spaceComplexity": "constant",
        "bestCase": "n",
        "worstCase": "n2",
        "type": "sorting",
        "isSortingAlgorithm": true,
        "isPathfindingAlgorithm": false,
        "description": "Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort."
    },
    {
        "id": 3,
        "name": "Bubble Sort",
        "timeComplexity": "n2",
        "spaceComplexity": "constant",
        "bestCase": "n",
        "worstCase": "n2",
        "type": "sorting",
        "isSortingAlgorithm": true,
        "isPathfindingAlgorithm": false,
        "description": "Bubble sort, sometimes referred to as 'sinking sort', is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements 'bubble' to the top of the list."
    },
    {
        "id": 4,
        "name": "Quick Sort",
        "timeComplexity": "n2",
        "spaceComplexity": "logn",
        "bestCase": "nlogn",
        "worstCase": "n2",
        "type": "sorting",
        "isSortingAlgorithm": true,
        "isPathfindingAlgorithm": false,
        "description": "Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. For this reason, it is sometimes called partition-exchange sort.[4] The sub-arrays are then sorted recursively. This can be done in-place, requiring small additional amounts of memory to perform the sorting. Quicksort is a comparison sort, meaning that it can sort items of any type for which a 'less-than' relation (formally, a total order) is defined. Efficient implementations of Quicksort are not a stable sort, meaning that the relative order of equal sort items is not preserved."
    },
    {
        "id": 5,
        "name": "Merge Sort",
        "timeComplexity": "nlogn",
        "spaceComplexity": "n",
        "bestCase": "nlogn",
        "worstCase": "nlogn",
        "type": "sorting",
        "isSortingAlgorithm": true,
        "isPathfindingAlgorithm": false,
        "description": "In computer science, merge sort (also commonly spelled as mergesort) is an efficient, general-purpose, and comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the order of equal elements is the same in the input and output. Merge sort is a divide and conquer algorithm that was invented by John von Neumann in 1945. A detailed description and analysis of bottom-up merge sort appeared in a report by Goldstine and von Neumann as early as 1948."
    },
]
